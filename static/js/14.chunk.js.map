{"version":3,"file":"static/js/14.chunk.js","sources":["/Users/linyitang/Desktop/newWallet2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","/Users/linyitang/Desktop/newWallet2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread.js","/Users/linyitang/Desktop/newWallet2/src/component/qrcode/index.jsx","/Users/linyitang/Desktop/newWallet2/src/contract/index.js","/Users/linyitang/Desktop/newWallet2/src/page/ethereum/general/transfer.jsx"],"sourcesContent":["export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty\";\nexport default function _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}","import qrcode from './qrcode';\nimport QRcodeInput from './qrcodeInput';\n// import QRcodeView from './qrcodeView';\nexport default {\n    qrcode,\n    QRcodeInput,\n    // QRcodeView\n}\nexport {\n    qrcode,\n    QRcodeInput,\n    // QRcodeView\n}","import * as ethers from 'ethers/index.js';\nimport Config from './config.json'\n\n\n\nfunction toHumanReadable(abi) {\n    if (!Array.isArray(abi)) { return }\n    abi = abi.filter(v => v.type !== 'fallback')\n    const hrabi = abi.map(v => {\n        const type = v.type\n        const name = v.name ? ' ' + v.name : ''\n        const inputs = v.inputs ? v.inputs.map(i => i.type + (i.indexed ? ' indexed' : '') + (i.name ? ' ' + i.name : '')).join() : ''\n        const stateMutability = v.stateMutability ? (v.stateMutability !== \"nonpayable\" ? ' ' + v.stateMutability : '') : ''\n        const returns = v.outputs ? (v.outputs.length >= 0 ? ` returns (${v.outputs.map((i) => i.type + (i.name ? ' ' + i.name : '')).join()})` : '') : ''\n        return `${type}${name}(${inputs})${stateMutability}${returns}`;\n    })\n    return JSON.stringify(hrabi, null, 2);\n}\nfunction toAbi(hrabi) {\n    if (!Array.isArray(hrabi)) { return }\n    let abi = new ethers.utils.Interface(hrabi).abi.map(abi => {\n        abi = JSON.parse(JSON.stringify(abi));\n        delete abi.gas;\n        if (abi.stateMutability === null) {\n            delete abi.stateMutability\n        }\n        return abi\n    })\n    return JSON.stringify(abi, null, 2);\n}\n\nfunction erc20(tokenAddress, provider) {\n    let contract = new ethers.Contract(tokenAddress, Config.erc20.abi, provider);\n    return contract;\n}\n\nasync function deployErc20Token(name, symbol, decimals, wallet) {\n    let erc20 = new ethers.ContractFactory(Config.erc20.abi, Config.erc20.bytecode);\n    erc20 = erc20.connect(wallet);\n    let contract = await erc20.deploy(name, symbol, decimals);\n    return contract\n}\n\nasync function deployMutiWalletToken(_owners, _required, _daylimit, wallet) {\n    let mutiWallet = new ethers.ContractFactory(Config.mutiWallet.abi, Config.mutiWallet.bytecode);\n    mutiWallet = mutiWallet.connect(wallet);\n    let contract = await mutiWallet.deploy(name, symbol, decimals);\n    return contract\n}\n\n\nfunction Event(contract, eventName, args = [], fromBlock = 0, toBlock = 'latest') {\n    args = Array.isArray(args) ? args : [args];\n    let event = contract.filters[eventName](...args);\n    let abi = contract.interface.abi.find((v) => v.name === eventName).inputs;\n\n    let filter = {\n        fromBlock,\n        toBlock,\n        ...event\n    }\n\n\n    return this.getLogs(filter).then(function (result) {\n        let coder = new ethers.utils.AbiCoder()\n\n        let abi1 = abi.filter((v) => v.indexed)\n        let abi2 = abi.filter((v) => !v.indexed)\n\n        let r = result.map(r => {\n            r.topics.shift()\n            let topics = r.topics.map((t, i) => {\n                return coder.decode([abi1[i]], t)[0]\n            })\n            let datas = coder.decode(abi2, r.data)\n            let _r = abi.map(v => v.indexed ? topics.shift() : datas.shift())\n            _r.transactionHash = r.transactionHash\n            _r.blockNumber = Number(r.blockNumber)\n            return _r\n        })\n\n        return r\n    })\n\n    return Promise.resolve(1)\n}\n\n\nexport default {\n    toAbi,\n    toHumanReadable,\n    deployErc20Token,\n    deployMutiWalletToken,\n    erc20,\n    Event\n}\n\nexport {\n    toAbi,\n    toHumanReadable,\n    deployErc20Token,\n    deployMutiWalletToken,\n    erc20,\n    Event\n};\n\n","import React, { Component } from 'react';\nimport { Subject } from 'rxjs'\nimport Bignumber from 'bignumber.js';\nimport { observer, inject } from 'mobx-react';\nimport axios from 'axios';\nimport { QRcodeInput } from '../../../component/qrcode'\nimport QRCode from 'qrcode-react'\nimport { erc20 } from '../../../contract'\nimport * as ethers from 'ethers/index.js';\n\n\n@inject('ethereumStore')\n@observer\nexport default class Transfer extends Component {\n    // constructor(props) {\n    //     super(props)\n    //     this.state = {\n    //         balance: 0,\n    //         token: {}\n    //     }\n    // }\n    constructor(props) {\n        super(props)\n        this.state = {\n            address: props.ethereumStore.address || '0x'.padEnd(42, '0'),\n            token: {},\n            balance: []\n        };\n        this.subject = new Subject();\n    }\n    onSearch = (value) => {\n        if (/^0x[0-9a-f]{40}$/ig.test(value)) {\n            this.subject.next(value)\n        }\n    }\n    componentWillReceiveProps(props) {\n        this.state = {\n            address: props.ethereumStore.address || '0x'.padEnd(42, '0'),\n            balance: []\n        };\n        this.onSearch(this.state.address)\n    }\n    componentWillMount = () => {\n        this.subject = this.subject.subscribe({\n            next: async (value) => {\n                try {\n                    let { data } = await axios.get(`/proxy/http://api.ethplorer.io/getAddressInfo/${value}?apiKey=freekey`)\n                    let tokens = []\n                    tokens.push({ address: \"0x0\", symbol: 'ETH', balance: data.ETH.balance, decimals: 18 })\n                    if (data.tokens) {\n                        for (let token of data.tokens) {\n                            tokens.push({\n                                address: token.tokenInfo.address,\n                                symbol: token.tokenInfo.symbol,\n                                decimals: token.tokenInfo.decimals,\n                                balance: new Bignumber(token.balance).div(\n                                    new Bignumber(10).pow(token.tokenInfo.decimals)\n                                )\n                            })\n                        }\n                    }\n                    this.setState({ balance: tokens })\n                } catch (e) { }\n            }\n        })\n        this.onSearch(this.state.address)\n    }\n    submit = async () => {\n        if (this.state.token.address !== '0x0') {\n            let contract = erc20(this.state.token.address, this.props.ethereumStore.provider)\n            contract = contract.connect(this.props.ethereumStore.wallet.connect(this.props.ethereumStore.provider));\n            let tx = await contract.transfer(this.target, new Bignumber(this.amount).multipliedBy(\n                new Bignumber(10).pow(this.state.token.decimals)\n            ).toString())\n            alert('txid: ' + tx.hash)\n            await tx.wait()\n        } else {\n            let transaction = {\n                to: this.target,\n                value: ethers.utils.parseEther(this.amount + '')\n            };\n            let tx = await this.props.ethereumStore.wallet.connect(this.props.ethereumStore.provider).sendTransaction(transaction);\n            alert('txid: ' + tx.hash)\n            await tx.wait()\n        }\n        this.onSearch(this.state.address)\n    }\n    render() {\n        let inputs = this.state.balance.map((x) => {\n            return (\n                <option key={x.address} value={x.address}>{x.symbol}</option>\n            )\n        })\n        inputs.unshift(<option key={'choose'} value={'choose'}>請選擇</option>)\n\n        return (\n            <div>\n                <div className=\"box box-primary\">\n                    <div className=\"box-header with-border\">\n                        <h3 className=\"box-title\">自己錢包的QR Code</h3>\n                    </div>\n                    <div className=\"box-body\">\n                        <QRCode size={200} key={this.props.ethereumStore.address} value={this.props.ethereumStore.address} />\n                    </div>\n                </div>\n                <div className=\"box box-primary\">\n                    <div className=\"box-header with-border\">\n                        <h3 className=\"box-title\">Token轉帳</h3>\n                    </div>\n                    <div className=\"box-body\">\n                        <div className=\"form-group\" >\n                            <label>當前地址</label>\n                            <input type=\"text\" className=\"form-control\" value={this.props.ethereumStore.address} disabled />\n                        </div>\n                        <div className=\"form-group\">\n                            <label>Token選擇</label>\n                            <select className=\"form-control\" onChange={(e) => {\n                                this.state.token = this.state.balance.find(v => v.address === e.target.value);\n                                this.forceUpdate();\n                            }}>\n                                {inputs}\n                            </select>\n                        </div>\n                        <div className=\"form-group\">\n                            <label>{this.state.token.symbol || 'Token'}餘額</label>\n                            <input className=\"form-control\" value={this.state.token.balance} disabled />\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"qrcodefile\">收款人地址(掃描或輸入對方QRCode)</label>\n                            <QRcodeInput placeholder=\"0x\" onChange={(e) => { this.target = e.target.value }} />\n                        </div>\n                        <div className=\"form-group\">\n                            <label>{this.state.token.symbol || 'Token'}</label>\n                            <input className=\"form-control\" type=\"number\" defaultValue={'0'} onChange={(e) => { this.amount = e.target.value }} />\n                        </div>\n                        <button type=\"button\" className=\"btn btn-primary\" onClick={this.submit}>送出</button>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\nexport { Transfer }"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACbA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAAA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AADA;AAGA;AAHA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAOA;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AADA;AAGA;AAHA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAQA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAFA;AACA;AAMA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AASA;;;;;;;;;;;;AA5FA;AAaA;AAaA;AAKA;AAOA;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","sourceRoot":""}